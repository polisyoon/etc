{
    "content": "\nimport os\nimport pymysql\nimport hashlib\nfrom datetime import datetime, timedelta, time\nimport sys\nimport requests\nimport json\nimport time\nimport time as time_module\n\n\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Connect to the database\ncnx = pymysql.connect(\n    host=os.getenv('DB_HOST'),\n    user=os.getenv('DB_USER'),\n    passwd=os.getenv('DB_PASSWD'),\n    db=os.getenv('DB_NAME'),\n    cursorclass=pymysql.cursors.DictCursor,\n    use_unicode=True,\n    charset=os.getenv('DB_CHARSET')\n)\n\n\ndef safe_get(d, *keys):\n    \"\"\"Retrieve nested dictionary values safely.\"\"\"\n    for key in keys:\n        if d is None:\n            return \"\"\n        d = d.get(key)\n    return d\n\n\ncursor = cnx.cursor()\n#querySelect = \"SELECT * FROM sessions WHERE event_season BETWEEN 2022 AND 2022 ORDER BY event_season ASC\" #where event_season = '2023' and event_id = 'bfd8a08c-cbb4-413a-a210-6d34774ea4c5';\nquerySelect = \"SELECT * FROM sessions WHERE year = '2024' AND date >= CURDATE() - INTERVAL 4 DAY AND date < CURDATE() + INTERVAL 1 DAY ORDER BY date DESC;\"\n\ncursor.execute(querySelect)\nresult = cursor.fetchall()\nprint(result)\nfor row in result:\n    session_id = row['id']\n    event_id = row['event_id']\n    #year = row['year']\n    category_id = row['category_id']  # << NEW\n    track_condition = row['track_condition']# << NEW\n    air_condition = row['air_condition'] # << NEW\n    humidity_condition = row['humidity_condition'] # << NEW\n    ground_condition = row['ground_condition'] # << NEW\n    weather_condition = row['weather_condition'] # << NEW\n    session_number = row['number']\n    circuit_name = row['circuit_name'] # << NEW\n    session_type = row['type'] # << NEW\n    category_name = row['category_name'] # << NEW\n    event_name = row['event_name']  # << NEW\n    event_sponsored_name    = row['event_sponsored_name'] # << NEW\n    year = row['year'] # << NEW\n    circuit_id = row['circuit_id'] # << NEW\n    circuit_legacy_id = row['circuit_legacy_id'] # << NEW\n    circuit_place = row['circuit_place'] # << NEW\n    circuit_nation = row['circuit_nation'] # << NEW\n    circuit_country_iso = row['country_iso'] # << NEW\n    circuit_country_name = row['country_name'] # << NEW\n    circuit_country_region_iso = row['country_region_iso'] # << NEW\n    event_short_name = row['event_short_name'] # << NEW\n\n\n\n    print(\"RUNNING SESSION \"+str(year)+\" \"+str(session_id))\n    print(\"***********************************\")\n    url = \"https://api.motogp.pulselive.com/motogp/v1/results/session/\" + str(session_id) + \"/classification?test=false\"\n    print(url)\n    #sys.exit(0)\n\n    # Removed the sys.exit(0) as it stops the script execution\n    response = requests.get(url)\n    data = response.json()\n\n    if 'classification' in data:\n        classifications = data['classification']\n        file = data.get('file', '')\n        #files = data.get('files', '')\n        files = \"\"\n        records = data.get('records', '')\n\n        for item in classifications:\n            id = item.get(\"id\", None)\n            position = item.get(\"position\", None)\n\n            rider = item.get(\"rider\", {})\n            rider_id = rider.get(\"id\", None)\n            full_name = rider.get(\"full_name\", None)\n            legacy_id = rider.get(\"legacy_id\", None)\n            rider_number = rider.get(\"number\", None)\n            riders_api_uuid = rider.get(\"riders_api_uuid\", None)\n\n            rider_country = rider.get(\"country\", {})\n            rider_country_iso = rider_country.get(\"iso\", None)\n            rider_country_name = rider_country.get(\"name\", None)\n            rider_region_iso = rider_country.get(\"region_iso\", None)\n\n            team = item.get(\"team\", {})\n            team_id = team.get(\"id\", None) if team else None\n            team_name = team.get(\"name\", None) if team else None\n            team_legacy_id = team.get(\"legacy_id\", None) if team else None\n\n            season = team.get(\"season\", {}) if team else {}\n            season_id = season.get(\"id\", None) if season else None\n            season_year = season.get(\"year\", None) if season else None\n            season_current = season.get(\"current\", None) if season else None\n\n            constructor = item.get(\"constructor\", {})\n            constructor_id = constructor.get(\"id\", None) if constructor else None\n            constructor_name = constructor.get(\"name\", None) if constructor else None\n            constructor_legacy_id = constructor.get(\"legacy_id\", None) if constructor else None\n\n            average_speed = item.get(\"average_speed\", None)\n\n            gap = item.get(\"gap\", {})\n            gap_first = gap.get(\"first\", None)\n            gap_lap = gap.get(\"lap\", None)\n            gap_prev = gap.get(\"prev\", None)    #<< NEW\n\n            top_speed = item.get(\"top_speed\",None)  # << NEW\n            best_lap = item.get(\"best_lap\", None)\n            best_lap_number = best_lap.get(\"number\", None) if best_lap else None # << NEW\n            best_lap_time = best_lap.get(\"time\", None) if best_lap else None # << NEW\n\n\n            total_laps = item.get(\"total_laps\", None)\n            time = item.get(\"time\", None)\n            points = item.get(\"points\", None)\n            status = item.get(\"status\", None)\n            file,  # Assuming this is directly given from somewhere else in your code\n            files,  # Assuming this is directly given from somewhere else in your code\n            session_id,  # Assuming this is directly given from somewhere else in your code\n            event_id,  # Assuming this is directly given from somewhere else in your code\n            year,  # Assuming this is directly given from somewhere else in your code\n            category_id = row['category_id']  # << NEW\n            track_condition = row['track_condition']  # << NEW\n            air_condition = row['air_condition']  # << NEW\n            humidity_condition = row['humidity_condition']  # << NEW\n            ground_condition = row['ground_condition']  # << NEW\n            weather_condition = row['weather_condition']  # << NEW\n            print(\"***********************************\")\n            print(category_id)\n            print(\"TRACK CONDITION: \", track_condition)\n            print(\"AIR CONDITION: \", air_condition)\n            print(\"HUMIDITY CONDITION: \", humidity_condition)\n            print(\"GROUND CONDITION: \", ground_condition)\n            print(\"WEATHER CONDITION: \", weather_condition)\n            print(\"***********************************\")\n\n\n\n            # The remaining items seem to be directly available in your code context:\n            # file, files, session_id, event_id, event_year, md5\n\n            md5 = rider_id + str(session_id) + str(event_id) + str(year)+str(category_id)\n            md5 = hashlib.md5(md5.encode('utf-8')).hexdigest()\n            try:\n                insert_query = \"\"\"\n                INSERT INTO results (\n                    result_id, position, rider_id, rider_full_name, rider_country_iso, \n                    rider_country_name, rider_region_iso, rider_legacy_id, rider_number,\n                    riders_api_uuid, team_id, team_name, team_legacy_id, team_season_id,\n                    team_season_year, team_season_current, constructor_id, constructor_name,\n                    constructor_legacy_id, average_speed, gap_first, gap_lap, total_laps, \n                    time, points, status, file, files,session_id, event_id,year,md5,gap_prev,top_speed,best_lap_number,best_lap_time,track_condition,air_condition,humidity_condition,ground_condition,weather_condition,category_id,session_number,circuit_name,session_type,category_name,event_name,event_sponsored_name,event_season,circuit_id,circuit_legacy_id,circuit_place,circuit_nation,circuit_country_iso,circuit_country_name,circuit_country_region_iso,event_short_name)\n                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                ON DUPLICATE KEY UPDATE\n                    position = VALUES(position),\n                    rider_id = VALUES(rider_id),\n                    rider_full_name = VALUES(rider_full_name),\n                    rider_country_iso = VALUES(rider_country_iso),\n                    rider_country_name = VALUES(rider_country_name),\n                    rider_region_iso = VALUES(rider_region_iso),\n                    rider_legacy_id = VALUES(rider_legacy_id),\n                    rider_number = VALUES(rider_number),\n                    riders_api_uuid = VALUES(riders_api_uuid),\n                    team_id = VALUES(team_id),\n                    team_name = VALUES(team_name),\n                    team_legacy_id = VALUES(team_legacy_id),\n                    team_season_id = VALUES(team_season_id),\n                    team_season_year = VALUES(team_season_year),\n                    team_season_current = VALUES(team_season_current),\n                    constructor_id = VALUES(constructor_id),\n                    constructor_name = VALUES(constructor_name),\n                    constructor_legacy_id = VALUES(constructor_legacy_id),\n                    average_speed = VALUES(average_speed),\n                    gap_first = VALUES(gap_first),\n                    gap_lap = VALUES(gap_lap),\n                    total_laps = VALUES(total_laps),\n                    time = VALUES(time),\n                    points = VALUES(points),\n                    status = VALUES(status),\n                    file = VALUES(file),\n                    files = VALUES(files),\n                    session_id = VALUES(session_id),\n                    event_id = VALUES(event_id),\n                    year = VALUES(year),\n                    md5 = VALUES(md5),\n                    gap_prev = VALUES(gap_prev),\n                    top_speed = VALUES(top_speed),\n                    best_lap_number = VALUES(best_lap_number),\n                    best_lap_time = VALUES(best_lap_time),\n                    track_condition = VALUES(track_condition),\n                    air_condition = VALUES(air_condition),\n                    humidity_condition = VALUES(humidity_condition),\n                    ground_condition = VALUES(ground_condition),\n                    weather_condition = VALUES(weather_condition),\n                    category_id = VALUES(category_id),\n                    session_number = VALUES(session_number),\n                    circuit_name = VALUES(circuit_name),\n                    session_type = VALUES(session_type),\n                    category_name = VALUES(category_name),\n                    event_name = VALUES(event_name),\n                    event_sponsored_name = VALUES(event_sponsored_name),\n                    event_season = VALUES(year),\n                    circuit_id = VALUES(circuit_id),\n                    circuit_legacy_id = VALUES(circuit_legacy_id),\n                    circuit_place = VALUES(circuit_place),\n                    circuit_nation = VALUES(circuit_nation),\n                    circuit_country_iso = VALUES(circuit_country_iso),\n                    circuit_country_name = VALUES(circuit_country_name),\n                    circuit_country_region_iso = VALUES(circuit_country_region_iso),\n                    event_short_name = VALUES(event_short_name)\n\n\n                \"\"\"\n                print(insert_query)\n                cursor.execute(insert_query, (\n                    id,\n                    position,\n                    rider_id,\n                    full_name,\n                    rider_country_iso,\n                    rider_country_name,\n                    rider_region_iso,\n                    legacy_id,\n                    rider_number,\n                    riders_api_uuid,\n                    team_id,\n                    team_name,\n                    team_legacy_id,\n                    season_id,\n                    season_year,\n                    season_current,\n                    constructor_id,\n                    constructor_name,\n                    constructor_legacy_id,\n                    average_speed,\n                    gap_first,\n                    gap_lap,\n                    total_laps,\n                    time,\n                    points,\n                    status,\n                    file,\n                    files,\n                    session_id,\n                    event_id,\n                    year,\n                    md5,\n                    gap_prev,\n                    top_speed,\n                    best_lap_number,\n                    best_lap_time,\n                    track_condition,\n                    air_condition,\n                    humidity_condition,\n                    ground_condition,\n                    weather_condition,\n                    category_id,\n                    session_number,\n                    circuit_name,\n                    session_type,\n                    category_name,\n                    event_name,\n                    event_sponsored_name,\n                    year,\n                    circuit_id,\n                    circuit_legacy_id,\n                    circuit_place,\n                    circuit_nation,\n                    circuit_country_iso,  # Use the correct variable name here\n                    circuit_country_name,\n                    circuit_country_region_iso,\n                    event_short_name\n                ))\n\n                cnx.commit()\n            except TypeError as e:\n                if str(e) == \"'NoneType' object is not subscriptable\":\n                    print(item)\n                    sys.exit(0)\n                print(\"ca\" +str(e))\n                sys.exit(0)\n                #continue\n\n        # Inserting the records\n        #md5 = records[0]['rider']['id']+str(records[0]['bestLap']['number'])+str(records[0]['bestLap']['time'])+str(records[0]['speed'])+str(records[0]['year'])+str(session_id)\n        #md5 = hashlib.md5(md5.encode('utf-8')).hexdigest()\n        #records = [{\"type\": \"poleLap\", \"rider\": {\"id\": \"3c7598e5-12ec-4e19-9311-1c0e9a017cbe\", \"full_name\": \"Diogo Moreira\", \"country\": {\"iso\": \"BR\", \"name\": \"Brazil\", \"region_iso\": \"\"}, \"legacy_id\": 10257 }, \"bestLap\": {\"number\": null, \"time\": \"01:39.0850\"}, \"speed\": \"156.2\", \"year\": null, \"isNewRecord\": false } ]\n        print(\"RECORDS: \", records)\n        if records is not None:\n            for record in records:\n                record_type = record['type']\n                rider_id = record['rider']['id']\n                rider_full_name = record['rider']['full_name']\n                rider_country_iso = record['rider']['country']['iso']\n                rider_country_name = record['rider']['country']['name']\n                rider_region_iso = record['rider']['country']['region_iso']\n                rider_legacy_id = record['rider']['legacy_id']\n                best_lap_number = record['bestLap']['number']\n                best_lap_time = record['bestLap']['time']\n                speed = record['speed']\n                year = record['year']\n                is_new_record = record['isNewRecord']\n\n\n                md5 = rider_id + str(session_id) + str(event_id) + str(year)+str(category_id)\n                md5 = hashlib.md5(md5.encode('utf-8')).hexdigest()\n                print(\"CATEGORY ID: \", category_id)\n\n                try:\n                    insert_record_query = \"\"\"\n                        INSERT INTO records (\n                            record_type, rider_id, rider_full_name, rider_country_iso,\n                            rider_country_name, rider_region_iso, rider_legacy_id, bestLap_number,\n                            bestLap_time, speed, record_year, isNewRecord, event_id, md5, category_id, category_name, event_name, event_sponsored_name, year, circuit_id, circuit_legacy_id, circuit_place, circuit_nation, circuit_country_iso, circuit_country_name, circuit_country_region_iso, event_short_name,session_id)\n                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s,%s,%s,%s,%s ,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n                    ON DUPLICATE KEY UPDATE\n                        record_type = VALUES(record_type),\n                        rider_id = VALUES(rider_id),\n                        rider_full_name = VALUES(rider_full_name),\n                        rider_country_iso = VALUES(rider_country_iso),\n                        rider_country_name = VALUES(rider_country_name),\n                        rider_region_iso = VALUES(rider_region_iso),\n                        rider_legacy_id = VALUES(rider_legacy_id),\n                        bestLap_number = VALUES(bestLap_number),\n                        bestLap_time = VALUES(bestLap_time),\n                        speed = VALUES(speed),\n                        record_year = VALUES(record_year),\n                        isNewRecord = VALUES(isNewRecord),\n                        event_id = VALUES(event_id),\n                        md5 = VALUES(md5),\n                        category_id = VALUES(category_id),\n                        category_name = VALUES(category_name),\n                        event_name = VALUES(event_name),\n                        event_sponsored_name = VALUES(event_sponsored_name),\n                        year = VALUES(year),\n                        circuit_id = VALUES(circuit_id),\n                        circuit_legacy_id = VALUES(circuit_legacy_id),\n                        circuit_place = VALUES(circuit_place),\n                        circuit_nation = VALUES(circuit_nation),\n                        circuit_country_iso = VALUES(circuit_country_iso),\n                        circuit_country_name = VALUES(circuit_country_name),\n                        circuit_country_region_iso = VALUES(circuit_country_region_iso),\n                        event_short_name = VALUES(event_short_name),\n                        session_id = VALUES(session_id)\n                   \n                     \n                    \"\"\"\n                    cursor.execute(insert_record_query, (\n                        record_type, rider_id, rider_full_name, rider_country_iso,\n                        rider_country_name, rider_region_iso, rider_legacy_id, best_lap_number,\n                        best_lap_time, speed, year, is_new_record, event_id, md5, category_id, category_name, event_name, event_sponsored_name, year, circuit_id, circuit_legacy_id, circuit_place, circuit_nation, circuit_country_iso, circuit_country_name, circuit_country_region_iso, event_short_name,session_id\n                    ))\n                    cnx.commit()\n                except TypeError as e:\n                    cnx.rollback()\n                    print(\"CaazziA TypeError occurred:\", e)\n                    sys.exit(0)\n                    # Log the error, and/or print more diagnostic information\n\n    print(\"TIME TO SLEEP\")\n    time_module.sleep(2)\n\n#print(\"TIME TO SLEEP\")\n#time.sleep(20)\n# Always close the cursor and connection\ncursor.close()\ncnx.close()\nprint(\"DONE\")\n#time.sleep(20)\n"
}