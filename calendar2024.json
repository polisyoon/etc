{
    "content": "import json\nimport pymysql\nimport os\nimport requests\nfrom datetime import datetime  # Importa datetime per la conversione delle date\nfrom dotenv import load_dotenv\nimport logging\n\n# Configura il logging\nlogging.basicConfig(level=logging.INFO)\nload_dotenv()\n\n# Connessione al database MySQL\ncnx = pymysql.connect(\n\thost=os.getenv('DB_HOST'),\n\tuser=os.getenv('DB_USER'),\n\tpasswd=os.getenv('DB_PASSWD'),\n\tdb=os.getenv('DB_NAME'),\n\tcursorclass=pymysql.cursors.DictCursor,\n\tuse_unicode=True,\n\tcharset=os.getenv('DB_CHARSET')\n)\n\n\n# Funzione per convertire le date nel formato DATETIME\ndef convert_date(date_string):\n\tif date_string:\n\t\ttry:\n\t\t\t# Converte la stringa ISO 8601 in oggetto datetime\n\t\t\tdate_obj = datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%S.%fZ')\n\t\t\treturn date_obj.strftime('%Y-%m-%d %H:%M:%S')\n\t\texcept ValueError:\n\t\t\ttry:\n\t\t\t\t# Gestisce il formato senza microsecondi\n\t\t\t\tdate_obj = datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%S+00:00')\n\t\t\t\treturn date_obj.strftime('%Y-%m-%d %H:%M:%S')\n\t\t\texcept ValueError:\n\t\t\t\tlogging.error(f\"Errore nella conversione della data: {date_string}\")\n\t\t\t\treturn None\n\treturn None\n\n\n# Funzione per inserire i dati nella tabella principale\ndef insert_main_data(cursor, data):\n\tinsert_query = \"\"\"\n    INSERT INTO MotoGP_Calendar (id, shortname, name, hashtag, circuit, country_code, country,\n        start_date, end_date, local_tz_offset, test, has_timing, friendly_name, dates, last_session_end_time)\n    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n    ON DUPLICATE KEY UPDATE\n        shortname = VALUES(shortname),\n        name = VALUES(name),\n        hashtag = VALUES(hashtag),\n        circuit = VALUES(circuit),\n        country_code = VALUES(country_code),\n        country = VALUES(country),\n        start_date = VALUES(start_date),\n        end_date = VALUES(end_date),\n        local_tz_offset = VALUES(local_tz_offset),\n        test = VALUES(test),\n        has_timing = VALUES(has_timing),\n        friendly_name = VALUES(friendly_name),\n        dates = VALUES(dates),\n        last_session_end_time = VALUES(last_session_end_time);\n    \"\"\"\n\t\n\tfor event in data['calendar']:\n\t\tlogging.info(f\"Elaborazione dell'evento ID: {event['id']} - {event['name']}\")\n\t\ttry:\n\t\t\tcursor.execute(insert_query, (\n\t\t\t\tevent['id'], event['shortname'], event['name'], event['hashtag'], event['circuit'],\n\t\t\t\tevent['country_code'], event['country'],\n\t\t\t\tconvert_date(event['start_date']),  # Converte la data\n\t\t\t\tconvert_date(event['end_date']),  # Converte la data\n\t\t\t\tevent['local_tz_offset'], event['test'], event['has_timing'], event['friendly_name'],\n\t\t\t\tevent['dates'],\n\t\t\t\tconvert_date(event['last_session_end_time'])  # Converte la data\n\t\t\t))\n\t\texcept Exception as e:\n\t\t\tlogging.error(f\"Errore durante l'inserimento dell'evento ID {event['id']}: {e}\")\n\n\n# Funzione per inserire le sessioni chiave nella tabella delle sessioni\ndef insert_session_data(cursor, event_id, sessions):\n\tinsert_query = \"\"\"\n    INSERT INTO MotoGP_KeySessionTimes (event_id, session_shortname, session_name, start_datetime_utc)\n    VALUES (%s, %s, %s, %s)\n    ON DUPLICATE KEY UPDATE\n        session_shortname = VALUES(session_shortname),\n        session_name = VALUES(session_name),\n        start_datetime_utc = VALUES(start_datetime_utc);\n    \"\"\"\n\t\n\tfor session in sessions:\n\t\tformatted_date = convert_date(session['start_datetime_utc'])  # Converte la data\n\t\tlogging.info(\n\t\t\tf\"Inserimento dati: {event_id}, {session['session_shortname']}, {session['session_name']}, {formatted_date}\")\n\t\ttry:\n\t\t\tcursor.execute(insert_query, (\n\t\t\t\tevent_id,\n\t\t\t\tsession['session_shortname'],\n\t\t\t\tsession['session_name'],\n\t\t\t\tformatted_date\n\t\t\t))\n\t\texcept pymysql.err.IntegrityError as e:\n\t\t\tif 'foreign key constraint fails' in str(e):\n\t\t\t\tlogging.error(f\"L'evento con ID {event_id} non esiste in MotoGP_Calendar. Skipping.\")\n\t\t\telse:\n\t\t\t\tlogging.error(f\"Errore durante l'inserimento della sessione per l'evento ID {event_id}: {e}\")\n\t\texcept Exception as e:\n\t\t\tlogging.error(f\"Errore durante l'inserimento della sessione per l'evento ID {event_id}: {e}\")\n\n\n# Effettua la richiesta all'API e ottieni il JSON\napi_url = \"https://mototiming.live/api/schedule?filter=all\"\nresponse = requests.get(api_url)\n\n# Verifica se la richiesta \u00e8 andata a buon fine\nif response.status_code == 200:\n\tdata = response.json()  # Carica il JSON dalla risposta\nelse:\n\tlogging.error(f\"Errore durante il recupero dei dati dall'API: {response.status_code}\")\n\tcnx.close()\n\texit()\n\ntry:\n\twith cnx.cursor() as cursor:\n\t\tlogging.info(\"Inizio inserimento dati nella tabella MotoGP_Calendar.\")\n\t\tinsert_main_data(cursor, data)\n\t\t\n\t\t# Inserisci i dati delle sessioni chiave\n\t\tfor event in data['calendar']:\n\t\t\tif event['key_session_times']:\n\t\t\t\tinsert_session_data(cursor, event['id'], event['key_session_times'])\n\t\t\n\t\t# Conferma le modifiche al database\n\t\tcnx.commit()\n\t\tlogging.info(\"Dati inseriti e commit effettuato con successo.\")\n\nexcept pymysql.err.IntegrityError as e:\n\tlogging.error(f\"Errore di integrit\u00e0: {e}\")\n\tcnx.rollback()  # Annulla le modifiche se c'\u00e8 un errore\n\nexcept Exception as e:\n\tlogging.error(f\"Errore durante l'esecuzione della query: {e}\")\n\tcnx.rollback()  # Annulla le modifiche se c'\u00e8 un errore\n\nfinally:\n\tcnx.close()\n\tlogging.info(\"Connessione al database chiusa.\")\n\nprint(\"Dati importati con successo!\")\n"
}