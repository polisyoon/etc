{
    "content": "import pymysql\nimport hashlib\nimport requests\nimport json\nimport sys\nimport hashlib\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Connect to the database\ncnx = pymysql.connect(\n    host=os.getenv('DB_HOST'),\n    user=os.getenv('DB_USER'),\n    passwd=os.getenv('DB_PASSWD'),\n    db=os.getenv('DB_NAME'),\n    cursorclass=pymysql.cursors.DictCursor,\n    use_unicode=True,\n    charset=os.getenv('DB_CHARSET')\n)\n\ncursor = cnx.cursor()\n\n#querySelect = \"SELECT * FROM racingmike_motogp.seasons order by year desc\"\nquerySelect = \"SELECT * FROM racingmike_motogp.seasons where year = 2024\"\ncursor.execute(querySelect)\nresult = cursor.fetchall()\n\nfor row in result:\n    session_id = row['id']\n    year = row['year']\n    print(\"*****\"+str(year)+\"******\")\n    querySelect3 = \"SELECT * FROM categories_general where year =\"+str(year)\n    cursor.execute(querySelect3)\n    categories = cursor.fetchall()\n    for r in categories:\n        category_id = r['id']\n        name = r['name']\n        year = r['year']\n        url = \"https://api.motogp.pulselive.com/motogp/v1/results/standings?seasonUuid=\" + str(session_id) + \"&categoryUuid=\" + str(category_id)\n        print(url)\n        response = requests.get(url)\n        dataResponse = response.status_code\n\n        if dataResponse == 200:\n            data = response.json()\n            for item in data['classification']:\n                rider = item['rider']\n                constructor = item['constructor']\n\n                # Check if team and season exist\n                team_id, team_name, team_legacy_id, season_id, season_year, season_current = (\n                None, None, None, None, None, None)\n                if 'team' in item and item['team']:\n                    team = item['team']\n                    team_id = team['id']\n                    team_name = team['name']\n                    team_legacy_id = team['legacy_id']\n\n                    if 'season' in team:\n                        season = team['season']\n                        season_id = season['id']\n                        season_year = season['year']\n                        season_current = season['current']\n\n                md5 = rider['id']+str(team_id)+str(constructor['id'])+str(year)+str(session_id)+str(category_id)\n                md5 = hashlib.md5(md5.encode('utf-8')).hexdigest()\n                #print(md5)\n                try:\n                    cursor.execute(\n                        \"\"\"\n                        INSERT INTO standing_riders \n                        (classification_id, position, rider_id, rider_full_name, rider_country_iso, rider_country_name, rider_region_iso, rider_legacy_id, rider_number, riders_api_uuid, team_id, team_name, team_legacy_id, season_id, season_year, season_current, constructor_id, constructor_name, constructor_legacy_id, session, points, xmlFile,year,md5,session_id,category_id)\n                        VALUES \n                        (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                        ON DUPLICATE KEY UPDATE \n                        position=VALUES(position), rider_full_name=VALUES(rider_full_name), rider_country_iso=VALUES(rider_country_iso), rider_country_name=VALUES(rider_country_name), rider_region_iso=VALUES(rider_region_iso), rider_legacy_id=VALUES(rider_legacy_id), rider_number=VALUES(rider_number), riders_api_uuid=VALUES(riders_api_uuid), team_id=VALUES(team_id), team_name=VALUES(team_name), team_legacy_id=VALUES(team_legacy_id), season_id=VALUES(season_id), season_year=VALUES(season_year), season_current=VALUES(season_current), constructor_id=VALUES(constructor_id), constructor_name=VALUES(constructor_name), constructor_legacy_id=VALUES(constructor_legacy_id), session=VALUES(session), points=VALUES(points), xmlFile=VALUES(xmlFile), year=VALUES(year), md5=VALUES(md5), session_id=VALUES(session_id), category_id=VALUES(category_id)\n                        \"\"\",\n                        (item['id'], item['position'], rider['id'], rider['full_name'], rider['country']['iso'],\n                        rider['country']['name'],\n                        rider['country']['region_iso'], rider['legacy_id'], rider.get('number', None),\n                        rider['riders_api_uuid'],\n                        team_id, team_name, team_legacy_id, season_id, season_year, season_current, constructor['id'],\n                        constructor['name'], constructor['legacy_id'],\n                        item['session'], item['points'], data['xmlFile'], year, md5, session_id, category_id)\n                    )\n\n                    cnx.commit()\n                except Exception as e:\n                    print(e)\n                    sys.exit(0)\n                    #cnx.rollback()"
}