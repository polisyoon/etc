{
    "content": "import pymysql\nimport hashlib\nimport requests\nimport sys\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Connect to the database\ncnx = pymysql.connect(\n    host=os.getenv('DB_HOST'),\n    user=os.getenv('DB_USER'),\n    passwd=os.getenv('DB_PASSWD'),\n    db=os.getenv('DB_NAME'),\n    cursorclass=pymysql.cursors.DictCursor,\n    use_unicode=True,\n    charset=os.getenv('DB_CHARSET')\n)\n\ncursor = cnx.cursor()\n\nquerySelect = \"SELECT * FROM racingmike_motogp.seasons where year = 2024\"\ncursor.execute(querySelect)\nresult = cursor.fetchall()\nfor row in result:\n    id = row['id']\n    year = row['year']\n    url = \"https://api.motogp.pulselive.com/motogp/v1/results/categories?seasonUuid=\"+str(id)\n    print(url)\n    #sys.exit(0)\n\n    response = requests.get(url)\n    data = response.json()\n    print(data)\n    for d in data:\n        id = d['id']\n        legacy_id = d['legacy_id']\n        name = d['name']\n\n        md5= str(id)+str(legacy_id)+str(name)+str(year)\n        md5 = hashlib.md5(md5.encode('utf-8')).hexdigest()\n\n        dict_mysql = {\"id\": id, \"legacy_id\": legacy_id, \"name\": name, \"year\": year, \"md5\": md5}\n        # build column names and placeholders\n        columns = []\n        placeholders = []\n        for key in dict_mysql.keys():\n            columns.append(key)\n            placeholders.append(\"%s\")\n\n        # convert integer to string\n        columns = [str(col) for col in columns]\n\n        # join column names and placeholders into a string\n        column_names = \", \".join(columns)\n        value_placeholders = \", \".join(placeholders)\n\n        # build insert statement\n\n        try:\n            query = f\"INSERT INTO categories_general ({column_names}) VALUES ({value_placeholders})\"\n\n            # execute insert statement with values\n            values = tuple(dict_mysql.values())\n            # print(dict_mysql)\n            print(query)\n            print(values)\n            cursor.execute(query, values)\n            cnx.commit()\n            print(\"***********************************\")\n        except Exception as e:\n            print(e)\n\n\n"
}